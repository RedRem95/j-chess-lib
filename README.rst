===========
j-chess-lib
===========

.. image:: https://img.shields.io/github/license/RedRem95/j-chess-lib?style=for-the-badge
        :target: https://github.com/RedRem95/j-chess-lib

.. image:: https://img.shields.io/pypi/v/j_chess_lib.svg?style=for-the-badge
        :target: https://pypi.python.org/pypi/j_chess_lib

.. image:: https://readthedocs.org/projects/j-chess-lib/badge/?version=latest&style=for-the-badge
        :target: https://j-chess-lib.readthedocs.io/en/latest/?version=latest
        :alt: Documentation Status


Python library for a j-chess bot.
This library provides an interface to connect to a j-chess-server_ and play some games with a self written bot.
To see the currently supported j-chess-xsd_ please see Documentation_


* Free software: GNU General Public License v3
* Documentation: https://j-chess-lib.readthedocs.io.

Server and Communication xsd

* Server:
    * .. image:: https://img.shields.io/github/license/JoKrus/j-chess-server?style=for-the-badge
    * See: https://github.com/JoKrus/j-chess-server/
    * Documentation: https://github.com/JoKrus/j-chess-server/wiki
* Communication protocol:
    * .. image:: https://img.shields.io/github/license/JoKrus/j-chess-xsd?style=for-the-badge
    * See: https://github.com/JoKrus/j-chess-xsd/
    * Reference: https://github.com/JoKrus/j-chess-xsd


Features
--------

* Easy connection to server
* Interface to write a bot to play chess
    * Provides different interfaces with different complexity levels
* Pre-implemented bot to play random moves
* Basic generation for legal moves

Install
-------

PyPi package is comeing soon. Until then installation is done via

.. code-block::

    $ pip install j-chess-lib


See Installation_ for detailed instructions

Usage
-----

See here some examples to use this library.
For more detailed explanation see Usage_

Start
#####

See below for an example to start the client with your ai

.. code-block:: python

    from j_chess_lib.communication import Connection
    from j_chess_lib.client import Client
    from j_chess_lib.ai.Sample import SampleAI

    with Connection(server_address, server_port) as connection:
        ai = SampleAI()
        tournament_code = # Your optional UUID tournament code
        client = Client(connection=connection, ai=your_ai, tournament_code=tournament_code)
        client.start()
        client.join()

This example shows how to setup the connection and the client.
The tournament code is optional and does not have to be passed. If None is passed none will be send to the server.
The client is its own thread so you could for example start multiple clients parallel or do some other stuff. Like a gui...

AI
##

See below for an example to implement a very easy AI.
It uses the base-class that automatically stores match and game data when started so you can query it in the move generation when needed

.. code-block:: python

    from uuid import UUID
    from j_chess_lib.ai import StoreAI
    from j_chess_lib.ai.Container import GameState
    from j_chess_lib.communication import MoveData

    class SampleAI(StoreAI):
        def __init__(self):
            super(SampleAI, self).__init__(name=f"Unique Name of your very good AI")

        def get_move(self, game_id: UUID, match_id: UUID, game_state: GameState) -> MoveData:
            enemy, match_data = self.get_match(match_id=match_id)
            white_player = self.get_game(game_id=game_id, match_id=match_id)

            # Your super intelligent code to generate the best chess move ever generated

            move_data = # result of your code
            return move_data

This example initializes a SampleAI

ToDo
----

* Error fallbacks
* Some features

Credits
-------

* Idea and server generated by the nice JoKrus_
* xml library used to generate classes and serialize data xsdata_
* This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.

.. _Cookiecutter: https://github.com/audreyr/cookiecutter
.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage
.. _j-chess-server: https://github.com/JoKrus/j-chess-server
.. _server-LICENSE: https://github.com/JoKrus/j-chess-server/blob/master/LICENSE
.. _j-chess-xsd: https://github.com/JoKrus/j-chess-xsd
.. _xsd-LICENSE: https://github.com/JoKrus/j-chess-xsd/blob/master/LICENSE
.. _JoKrus: https://github.com/JoKrus
.. _xsdata: https://github.com/tefra/xsdata
.. _Installation: https://j-chess-lib.readthedocs.io/en/latest/?version=latest
.. _Usage: https://j-chess-lib.readthedocs.io/en/latest/?version=latest
.. _Documentation: https://j-chess-lib.readthedocs.io/en/latest/?version=latest
